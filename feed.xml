<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://seanelvidge.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://seanelvidge.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-31T21:05:29+00:00</updated><id>https://seanelvidge.github.io/feed.xml</id><title type="html">Sean Elvidge</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Batch Process in Bash</title><link href="https://seanelvidge.github.io/blog/2011/batch-process-in-bash/" rel="alternate" type="text/html" title="Batch Process in Bash"/><published>2011-03-18T02:30:00+00:00</published><updated>2011-03-18T02:30:00+00:00</updated><id>https://seanelvidge.github.io/blog/2011/batch-process-in-bash</id><content type="html" xml:base="https://seanelvidge.github.io/blog/2011/batch-process-in-bash/"><![CDATA[<p>I am writing this at 0230 because Joe just asked me how to do it, hence someone else in the world might also want to do it. The task is to do something (the same something) to a large group of files in linux. For example convert a folder of wma files to mp3’s (for this example you will need to have ffmpeg installed). We add the condition that we want to keep the file names as they are, and just convert them.</p> <p>It is fairly simple, we will write a script to do this (although you could do it straight from the terminal), for this example we will write a script called <em>wma2mp3</em>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gedit wma2mp3
</code></pre></div></div> <p>(Obviously change gedit for your favourite editor). Now add to that:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="k">*</span>.wma<span class="p">;</span> <span class="k">do
</span><span class="nv">filename</span><span class="o">=</span><span class="k">${</span><span class="nv">i</span><span class="p">%.*</span><span class="k">}</span>
ffmpeg <span class="nt">-i</span> <span class="s2">"</span><span class="nv">$filename</span><span class="s2">.wma"</span> <span class="s2">"</span><span class="nv">$filename</span><span class="s2">.mp3"</span>
<span class="k">done</span>
</code></pre></div></div> <p>Then all you need to do is place that file in the folder where you want to run it, then run it, and then you’re done! Again this is just an example and you can modify this to anything you want. If you actually want to change wma’s to mp3’s there are a few more options you may want to use, but I thought this would be a better ‘template’.</p> <p>For one more example, say you want to convert all your ps files in a folder to pdf’s (here you will need to have ps2pdf installed) we would use:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="k">*</span>.ps<span class="p">;</span> <span class="k">do
</span><span class="nv">filename</span><span class="o">=</span><span class="k">${</span><span class="nv">i</span><span class="p">%.*</span><span class="k">}</span>
ps2pdf <span class="s2">"</span><span class="nv">$filename</span><span class="s2">.ps"</span> <span class="s2">"</span><span class="nv">$filename</span><span class="s2">.pdf"</span>
<span class="k">done</span>
</code></pre></div></div> <p>Hope that helps!</p>]]></content><author><name></name></author><category term="code"/><category term="bash"/><summary type="html"><![CDATA[How to do the same process on a large number of files in Bash]]></summary></entry><entry><title type="html">God’s Numberis 20</title><link href="https://seanelvidge.github.io/blog/2011/gods-number-is-20/" rel="alternate" type="text/html" title="God’s Numberis 20"/><published>2011-02-15T23:25:00+00:00</published><updated>2011-02-15T23:25:00+00:00</updated><id>https://seanelvidge.github.io/blog/2011/gods-number-is-20</id><content type="html" xml:base="https://seanelvidge.github.io/blog/2011/gods-number-is-20/"><![CDATA[<p>The Rubik Cube was invented by one Erno Rubik in 1974 and has gone one to be one of the most popular puzzles in the world, having sold over 350 million units worldwide, even though many people can not solve it! Although perhaps that isn’t overly surprising given the vast number of possible positions that the cube can take, some 43,252,003,274,489,856,000 (that is approximately 43 quintillion) with only 1 correct solution, i.e. if you want to solve it, randomly turning the cube almost certainly won’t get you there. To put that number in perspective, imagine 43 quintillion standard size (5.7cm) Rubik’s cubes stacked on top of each other. This would cover a distance of about 260 light years, or the distance from Earth to our next nearest star (i.e. Proxima Centauri, not the Sun) and back 30 times!</p> <p>But where does this number come from?</p> <p>A standard 3x3x3 Rubik’s cube has 8 corner pieces, 12 edge pieces and 6 centres. Since the centre pieces are fixed, there is nothing we can do to move them, so they do not enter our calculation to the number of possible positions. As there are 8 corner pieces we have \(8!\) (that is 8 factorial or \(8!=8 \times 7 \times 6 \times 5 \times 4 \times 3 \times 2 \times 1=40320\)) ways of positioning them, and we are free to place the first 7 where ever we want, however once these 7 are positioned, the 8th is clearly forced to be in a particular place, so we have \(3^7\) (\(3^7=2187\)) possibile positions for these \(8!\) options. The 3 arises since each corner piece has 3 colours on it. So far we have counted</p> \[8! \times 3^7 = 88179840.\] <p>Now, for the 12 edges, you may imagine that we have \(12!\) options, however we have to note that an odd permutation of corners results in an odd permutation of the edges, thus there are only \(\frac{12!}{2}\) options. Then in the same ways as the corners we count how many possible positions we can have, this time each piece only has 2 colours on it, but in a similar way once we have chosen where the first 11 go, the 12th piece is fixed, thus giving \(2^{11}\) options. So in total we have</p> \[8! \times 3^7 \times \frac{12!}{2} \times 2^{11} = 43,252,003,274,489,856,000\] <p>possible positions, which is what we wanted to show.</p> <p>Possibly one of the reason for the Rubik’s cube continued success is the fact that when you have solved it once, you want to mix it up and start again but this time do it quicker! This process just repeats and since 1981 there have been World Championships for ‘speedsolving’, plus a variety of other competitions. The current fastest recorded time of solving a Rubik’s cube is 6.65 seconds, solved by Feliks Zemdegs, a truly unbelievable feat. (Update: as of July 2023 the record is 3.13 seconds, achieved by Max Park). But should we care about Rubik’s cube? Are they just for fun? Well from a mathematical point of view, they are very interesting:</p> <p>For starters, Rubik’s cube are really very useful for examples and considering finite group theory, in fact the <a href="https://en.wikipedia.org/wiki/Group_theory">Group Theory Wikipedia page</a> has a picture of a Rubik cube at the very start. <a href="http://geometer.org/">Tom Davis</a> has written a very good document on Group Theory via Rubik’s Cubes which if you are interested in such things I would recommend you <a href="http://geometer.org/rubik/group.pdf">check it out</a>. However the point of this blog post is actually to do with the question: ‘what is the maximum number of moves it takes to solve a Rubik’s cube’?</p> <p>The real quest is to find an algorithm which will solve any Rubik cube in the minimum number of moves, this is called ‘God’s Algorithm’. The number of moves that this algorithm takes, in the worst case, is called ‘God’s Number’. The first work on this was done in 1980s and in 1981 Thistlethwaite proved that God’s number must be greater than or equal to 18 and less than or equal to 52. Over time these bounds were tightened, and it was in 1995 that the lower bound was first proved to be 20, this was done by Michael Reid (he had previously shown that the upper bound is less than or equal to 29). In the late 2000s Tomas Rokicki did some great work on tightening the upper bounds, culminating in this paper showing the upper bound to be less than or equal to 22.</p> <p>But, given the title of this blog, I hope you have worked out that the upper bound has since be refined to 20, that is both the lower bound and upper bound are 20, thus God’s Number is 20! And who is to thank for this? Well it is thanks to Morley Davidson, John Dethridge, Herbert Kociemba and Tomas Rokicki, not to mention Google, who donated idle computer time. They completed the solution to the problem, by first writing a computer program that could solve the position of any Rubik’s cube in about 20 seconds (not necessarily an optimal solution, but one that took less than 20 moves), and reduced the number of cases they actually needed to solve, via a variety of methods, including considering symmetry, this reduced the number of possible considerations to 55,882,296. To check this number of possibilities would have taken approximately 35 years with a high end computer, and this is where Google came in. The job was spread across a number of computers at Google which then completed the task in a few weeks. Proving that in fact every possible Rubik’s cube position can be solved in 20 moves or less! So ‘God’s Number’ is 20, quite a remarkable fact.</p>]]></content><author><name></name></author><category term="mathematics"/><summary type="html"><![CDATA[You never need more than 20 moves to solve a Rubik cube]]></summary></entry><entry><title type="html">Hilbert’s Hotel</title><link href="https://seanelvidge.github.io/blog/2010/HilbertHotel/" rel="alternate" type="text/html" title="Hilbert’s Hotel"/><published>2010-08-26T22:47:00+00:00</published><updated>2010-08-26T22:47:00+00:00</updated><id>https://seanelvidge.github.io/blog/2010/HilbertHotel</id><content type="html" xml:base="https://seanelvidge.github.io/blog/2010/HilbertHotel/"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/David_Hilbert">David Hilbert</a> was a greatly influential mathematician born in 1862. He worked in a variety of areas including infinite sets and it is in this area that he presented his ‘Hotel’, or his ‘paradox of the Grand Hotel’. Which helps the reader consider the infinite., so lets give it a go:</p> <p>Consider a hotel with a <em>countably infinite</em> number of rooms. Countably infinite is a set which has the same number of elements (cardinality) of the set of natural numbers (the counting numbers: 0, 1, 2, 3, …, there is no fixed decision on whether 0 is a natural number or not, it isn’t important here but I thought I would mention it). Now consider that all of the rooms in the hotel are currently occupied, you may think that the manager should put up a ‘No Vacancy’ sign, but perhaps not…</p> <p>Suppose that a guest turns up looking for a room. What should the manager say? Well that is easy, he gets every guest already in the hotel to move up one room. So the person in room 1 should move to room 2, the person in room 2 moves to room 3 etc. etc. We know this can continue since there is an infinite number of rooms in the hotel. So then we get that room 1 is empty, and we can put the guest in that room. This same method will work for any finite number of guests that show up at the hotel!</p> <p>Now how about if countably infinite number of people turn up asking for a room in the hotel. Can we fit infinitely more people into the hotel? Once again the manager has no problems, he asks the guests to move rooms. He asks the person in room 1 to move to room 2, the person in room 2 to room 4, the person in room 3 to room 6 and in general the person in room \(n\) to \(2n\). Again we can do this because there is an infinite number of rooms in the hotel! Now \(2n\) is always even, so all the odd numbered rooms are free, and the number of odd numbers is the same as the number of natural numbers, so there are countably infinite spaces. The fact that the odd numbers and natural numbers have the same cardinality itself is counter-intuitive, but hopefully I can convince you that it is true very quickly:</p> \[\begin{eqnarray*} 1 &amp;\longrightarrow &amp; 1 \\ 3 &amp;\longrightarrow &amp; 2 \\ 5 &amp;\longrightarrow &amp; 3 \\ 7 &amp;\longrightarrow &amp; 4 \\ 9 &amp;\longrightarrow &amp; 5 \\ 11 &amp;\longrightarrow &amp; 6 \\ \vdots &amp;\longrightarrow &amp; \vdots \end{eqnarray*}\] <p>So there is a clear mapping between the natural numbers and the odd numbers. Hence the infinite number of guests can fit in the hotel.</p> <p>The final case to consider, what if a countably infinite number of coaches turn up, each with a countably infinite number of passengers. Is there room for all of them in the hotel? You’ve guessed it, there is! As long as the seats on the coaches are numbered (we can avoid this condition if we can use the beast which is the ‘<a href="https://en.wikipedia.org/wiki/Axiom_of_choice">Axiom of Choice</a>’) we can find everyone a room. First we want to empty all of the odd rooms again, we do this the same as above, move everyone in room \(n\) to room \(2n\). Now take the 1st coach, say the seats are numbered \(1, 2, 3, \ldots\) then we can place the person in coach 1, seat 1 in room \(3^1\), seat 2 in room \(3^2\), seat 3 in room \(3^3\) etc. etc. Now for coach 2, again with seats numbered \(1, 2, 3, \ldots\) we place the person in seat 1 in room \(5^1\), seat 2 to room \(5^2\) etc. etc. So in general for coach \(i\) and the person in seat \(n\) we can place them in room \(p^n\) where \(p\) is \(i+1\)th prime number, and there we have it! We have taken our hotel, with a countably infinite number of rooms, each of which is occupied, and managed to find space for an infinite number of coaches, each with an infinite number of passengers.</p> <p>This is a great concept to test your understanding of infinity. The reason that this all works is because in a hotel with infinitely many rooms the statements ‘every room is occupied’ and ‘no more guests can stay in the hotel’ are not the same.</p>]]></content><author><name></name></author><category term="mathematics"/><summary type="html"><![CDATA[Use Hilbert's hotel to rethink about infinity]]></summary></entry><entry><title type="html">Probability of Sharing a Birthday</title><link href="https://seanelvidge.github.io/blog/2010/sharingABirthday/" rel="alternate" type="text/html" title="Probability of Sharing a Birthday"/><published>2010-08-24T22:47:00+00:00</published><updated>2010-08-24T22:47:00+00:00</updated><id>https://seanelvidge.github.io/blog/2010/sharingABirthday</id><content type="html" xml:base="https://seanelvidge.github.io/blog/2010/sharingABirthday/"><![CDATA[<p>Yesterday was my wife’s birthday and it reminded me about the so called ‘Birthday Problem’. Or, in a group what is the likelihood of two people sharing a birthday? The result is quite surprising…</p> <p>Obviously if the group is of size 366 you are guranteed that at least 2 people must share a birthday (for this, and for the rest of the blog I will ignore February 29th Birthdays, sorry if you happen to be born on that day!) but what is very suprising is that you need only 57 people to have 99% chance and 23 for over a 50% chance. The graph for this is below:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Birthday-480.webp 480w,/assets/img/Birthday-800.webp 800w,/assets/img/Birthday-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/Birthday.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> The probability of at least two people in a room sharing a birthday as the number of people in that room grows. </div> <p>Let me show you where this comes from. First, to make life a bit easier for ourselves, I am going to define some assumptions: we ignore leap years, the probability of twins and also assume that you are equally likely to be born on any of the 365 days of the year.</p> <p>Now, define \(P(n)\) to be the probability of at least two people in a group of \(n\) sharing a birthday, and \(P^{'}(n)\) the probability of there not being two people sharing a birthday. Also, since \(P(n)\) and \(P^{'}(n)\) are the only two possibilities and are mutually exclusive we have that:</p> \[P(n)=1-P^{'}(n).\] <p>The easiest way of working this out is to first calculate the probability that all \(n\) birthdays are different. For only 1 person the probability that that 1 person does not share a birthday with someone is \(\frac{365}{365}\).</p> <p>For 2 people, the probability that the second person has a different birthday from person 1 is \(\frac{364}{365}\). The probability that person 3 has a different birthday from 1 and 2 is \(\frac{363}{365}\), and so on and so on. Finally we take note that when events are independent of each other (as they are in this case), the probability of them all occurring is equal to the product of the probabilities.</p> <p>So we can now calculate the probability of there not being two people sharing a birthday (obviously if \(n &gt; 365\) then \(P^{'}(n)=0\), this is by the <a href="https://en.wikipedia.org/wiki/Pigeonhole_principle">pigeonhole principle</a>). So for \(n \le 365\):</p> \[\begin{eqnarray*} P^{'}(n) &amp;=&amp; \frac{365}{365} \times \frac{364}{365} \times \frac{363}{365} \times \frac{362}{365} \times \cdots \times \frac{366-n}{365}, \\ &amp;=&amp; \frac{365 \times 364 \times 363 \times 362 \times \cdots \times (366-n)}{365^n}, \\ &amp;=&amp; \frac{365!}{365^n(365-n)!}. \end{eqnarray*}\] <p>So, the probability of at least two people sharing a birthday in a group of size \(n\) is:</p> \[P(n)=1-\frac{365!}{365^n(365-n)!}.\] <p>And this equation gives you the probablility of two people sharing a birthday in a group of size \(n\). If you want to work the probability out for a different value of \(n\) just plug the value you want into the equation above and run the calculations. It is a suprising result and counter-intuitive, but always a good one to get out at birthday parties…</p>]]></content><author><name></name></author><category term="mathematics"/><summary type="html"><![CDATA[What is the probability of two people sharing a birthday]]></summary></entry></feed>